package controller;

import java.io.IOException;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import dto.user.UserDTO;
import service.config.ConfigService;

/**
 * Servlet implementation class ConfigController
 */
@WebServlet(description = "Recibe las peticiones para configuraciones del sistema", urlPatterns = { "/config" })
public class ConfigController extends HttpServlet {
	private static final long serialVersionUID = 1L;
	private ConfigService configService;
       
    /**
     * @see HttpServlet#HttpServlet()
     */
    public ConfigController() {
        super();
        if(this.getConfigService() == null){
        	this.setConfigService(new ConfigService());
        }
        
    }

	/**
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		HttpSession session = request.getSession();
		UserDTO user = (UserDTO)session.getAttribute("user");
		if(user != null){
			String action = request.getParameter("action");	
			if(action != null && !action.equals("") && action.length() > 0){
				if(action.equals("consultarMenus")){
					consultarMenus(request,response);
				}else if(action.equals("nuevoActualizarMenus")){
					nuevoActualizarMenu(request,response);
				}else if(action.equals("consultarSubmenus")){
					consultarSubmenus(request,response);
				}else if(action.equals("nuevoActualizarSubmenus")){
					nuevoActualizarSubmenus(request,response);
				}else if(action.equals("consultarPerfiles")){
					consultarPerfiles(request,response);
				}else if(action.equals("nuevoActualizarPerfiles")){
					nuevoActualizarPerfiles(request,response);
				}else if(action.equals("menuPerfil")){
					menuPerfil(request,response);
				}else if(action.equals("nuevoActualizarMenus_Perfiles")){
					nuevoActualizarMenus_Perfiles(request,response);
				}else{
					System.out.println("El servicio no tiene accion1!, accion solicitada: "+action);
				}
			}else{
				System.out.println("El servicio no tiene accion0! "+ action +" "+ this.getClass().getSimpleName());
			}
		}else{
			RequestDispatcher r = request.getRequestDispatcher("index.jsp");
			try {
				r.forward(request, response);
			} catch (ServletException | IOException e) {
				e.printStackTrace();
			}
		}
	}

	/**
	 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {		
		doGet(request, response);
	}
	
	public void consultarMenus(HttpServletRequest request, HttpServletResponse response){
		getConfigService().consultarMenusService(request, response);
		RequestDispatcher r = getServletContext().getRequestDispatcher("/jsp/config/config_menus.jsp");
		try {
			r.forward(request, response);
		} catch (ServletException | IOException e) {
			
			e.printStackTrace();
		}
	}
	
	/**
	 * 
	 * @param request
	 * @param response
	 */
	public void nuevoActualizarMenu(HttpServletRequest request, HttpServletResponse response){		
		getConfigService().nuevoActualizarMenuService(request, response);
	}
	
	public void consultarSubmenus(HttpServletRequest request, HttpServletResponse response){	
		getConfigService().consultarMenusService(request, response);
		getConfigService().consultarSubmenusService(request, response);
		RequestDispatcher r = getServletContext().getRequestDispatcher("/jsp/config/config_subMenu.jsp");
		try {
			r.forward(request, response);
		} catch (ServletException | IOException e) {
			
			e.printStackTrace();
		}
	}
	
	public void nuevoActualizarSubmenus(HttpServletRequest request, HttpServletResponse response){
		getConfigService().nuevoActualizarSubmenusService(request, response);
	}
	
	public void consultarPerfiles(HttpServletRequest request, HttpServletResponse response){
		getConfigService().consultarPerfilesService(request, response);
		RequestDispatcher r = getServletContext().getRequestDispatcher("/jsp/config/config_perfiles.jsp");
		try {
			r.forward(request, response);
		} catch (ServletException | IOException e) {
			
			e.printStackTrace();
		}
	}
	
	public void nuevoActualizarPerfiles(HttpServletRequest request, HttpServletResponse response){
		getConfigService().nuevoActualizarPerfilesService(request, response);
	}
	
	public void menuPerfil(HttpServletRequest request, HttpServletResponse response){
		getConfigService().consultarSubmenusService(request, response);
		getConfigService().consultarPerfilesService(request, response);
		getConfigService().consultarMenuPerfilesService(request, response);
		RequestDispatcher r = getServletContext().getRequestDispatcher("/jsp/config/config_menuPerfil.jsp");
		try {
			r.forward(request, response);
		} catch (ServletException | IOException e) {
			
			e.printStackTrace();
		}
	}
	
	public void nuevoActualizarMenus_Perfiles(HttpServletRequest request, HttpServletResponse response){
		getConfigService().nuevoActualizarMenus_PerfilesService(request, response);
	}

	/**
	 * @return the configService
	 */
	private ConfigService getConfigService() {
		return configService;
	}

	/**
	 * @param configService the configService to set
	 */
	private void setConfigService(ConfigService configService) {
		this.configService = configService;
	}

}
